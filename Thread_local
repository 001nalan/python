import threading


#创建全局的ThreadLocal对象：
local_school=threading.local()

def process_student():
	#获取当前线程关联的student
	std=local_school.student
	print('Hello,%s(in %s)' %(std, threading.current_thread().name))
	
def process_thread(name):
	#绑定ThreadLocal的student:
	local_school.student=name
	process_student()
	
t1 = threading.Thread(target= process_thread, args=('Alice',), name='Thread-A')
t2 = threading.Thread(target= process_thread, args=('Bob',), name='Thread-B')
t1.start()
t2.start()
t1.join()
t2.join()


运行结果：
Hello, Alice (in Thread-A)
Hello, Bob (in Thread-B)

效果是使得不用加锁，能使各线程使用相同的局部变量但是不会互相干扰
